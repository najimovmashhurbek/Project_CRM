// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: companies.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Companies struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	PhoneNumbers         string   `protobuf:"bytes,3,opt,name=phoneNumbers,proto3" json:"phoneNumbers"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password"`
	Info                 string   `protobuf:"bytes,6,opt,name=info,proto3" json:"info"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt"`
	UpdateAt             string   `protobuf:"bytes,8,opt,name=updateAt,proto3" json:"updateAt"`
	DeletedAt            string   `protobuf:"bytes,9,opt,name=deletedAt,proto3" json:"deletedAt"`
	User                 []*User  `protobuf:"bytes,10,rep,name=User,proto3" json:"User"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Companies) Reset()         { *m = Companies{} }
func (m *Companies) String() string { return proto.CompactTextString(m) }
func (*Companies) ProtoMessage()    {}
func (*Companies) Descriptor() ([]byte, []int) {
	return fileDescriptor_42797fc8bb925a7c, []int{0}
}
func (m *Companies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Companies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Companies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Companies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Companies.Merge(m, src)
}
func (m *Companies) XXX_Size() int {
	return m.Size()
}
func (m *Companies) XXX_DiscardUnknown() {
	xxx_messageInfo_Companies.DiscardUnknown(m)
}

var xxx_messageInfo_Companies proto.InternalMessageInfo

func (m *Companies) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Companies) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Companies) GetPhoneNumbers() string {
	if m != nil {
		return m.PhoneNumbers
	}
	return ""
}

func (m *Companies) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Companies) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Companies) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Companies) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Companies) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

func (m *Companies) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

func (m *Companies) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*Companies)(nil), "user.Companies")
}

func init() { proto.RegisterFile("companies.proto", fileDescriptor_42797fc8bb925a7c) }

var fileDescriptor_42797fc8bb925a7c = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xff, 0xa4, 0x69, 0xff, 0x66, 0x40, 0xa4, 0x1a, 0xb1, 0xb0, 0x22, 0x14, 0x55, 0x5d,
	0x75, 0xd5, 0x45, 0x7b, 0x82, 0xd2, 0x05, 0x3b, 0x16, 0x45, 0x1c, 0xc0, 0x8d, 0x07, 0x61, 0xa9,
	0x89, 0x23, 0x3b, 0x81, 0x73, 0xb0, 0xe3, 0x48, 0x2c, 0x39, 0x02, 0x0a, 0x17, 0x41, 0x1e, 0xab,
	0xa9, 0x60, 0x63, 0xcd, 0x7c, 0xcf, 0x6f, 0x9e, 0xf4, 0x20, 0x2b, 0x4d, 0xd5, 0xc8, 0x5a, 0x93,
	0x5b, 0x35, 0xd6, 0xb4, 0x06, 0x93, 0xce, 0x91, 0xcd, 0xc1, 0xbf, 0x81, 0x2c, 0xde, 0x62, 0x48,
	0x77, 0xa7, 0x5f, 0x78, 0x05, 0xb1, 0x56, 0x22, 0x9a, 0x47, 0xcb, 0x74, 0x1f, 0x6b, 0x85, 0x08,
	0x49, 0x2d, 0x2b, 0x12, 0x31, 0x13, 0x9e, 0x71, 0x01, 0x97, 0xcd, 0xb3, 0xa9, 0xe9, 0xbe, 0xab,
	0x0e, 0x64, 0x9d, 0x18, 0xb1, 0xf6, 0x8b, 0xe1, 0x35, 0x8c, 0xa9, 0x92, 0xfa, 0x28, 0x12, 0x16,
	0xc3, 0x82, 0x39, 0x4c, 0x1b, 0xe9, 0xdc, 0xab, 0xb1, 0x4a, 0x8c, 0x59, 0x18, 0x76, 0x9f, 0xa4,
	0xeb, 0x27, 0x23, 0x26, 0x21, 0xc9, 0xcf, 0x78, 0x03, 0x69, 0x69, 0x49, 0xb6, 0xa4, 0xb6, 0xad,
	0xf8, 0xcf, 0xc2, 0x19, 0xf8, 0x6b, 0x5d, 0xa3, 0x64, 0x4b, 0xdb, 0x56, 0x4c, 0xc3, 0xb5, 0xd3,
	0xee, 0x9d, 0x8a, 0x8e, 0x14, 0x9c, 0x69, 0x70, 0x0e, 0x00, 0x0b, 0x48, 0x1e, 0x1d, 0x59, 0x01,
	0xf3, 0xd1, 0xf2, 0x62, 0x0d, 0x2b, 0xae, 0xc3, 0x93, 0x3d, 0xf3, 0xf5, 0x1d, 0xcc, 0x86, 0x4a,
	0x1e, 0xc8, 0xbe, 0xe8, 0x92, 0x70, 0x03, 0xd9, 0x8e, 0xa3, 0xcf, 0x65, 0x65, 0xc1, 0x38, 0x80,
	0xfc, 0x2f, 0xb8, 0x9d, 0x7d, 0xf4, 0x45, 0xf4, 0xd9, 0x17, 0xd1, 0x57, 0x5f, 0x44, 0xef, 0xdf,
	0xc5, 0xbf, 0xc3, 0x84, 0x5b, 0xdf, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xfd, 0xf8, 0x72,
	0x9a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompaniesServiceClient is the client API for CompaniesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompaniesServiceClient interface {
	CreateCompanies(ctx context.Context, in *Companies, opts ...grpc.CallOption) (*Companies, error)
}

type companiesServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompaniesServiceClient(cc *grpc.ClientConn) CompaniesServiceClient {
	return &companiesServiceClient{cc}
}

func (c *companiesServiceClient) CreateCompanies(ctx context.Context, in *Companies, opts ...grpc.CallOption) (*Companies, error) {
	out := new(Companies)
	err := c.cc.Invoke(ctx, "/user.CompaniesService/CreateCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompaniesServiceServer is the server API for CompaniesService service.
type CompaniesServiceServer interface {
	CreateCompanies(context.Context, *Companies) (*Companies, error)
}

// UnimplementedCompaniesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompaniesServiceServer struct {
}

func (*UnimplementedCompaniesServiceServer) CreateCompanies(ctx context.Context, req *Companies) (*Companies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanies not implemented")
}

func RegisterCompaniesServiceServer(s *grpc.Server, srv CompaniesServiceServer) {
	s.RegisterService(&_CompaniesService_serviceDesc, srv)
}

func _CompaniesService_CreateCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Companies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServiceServer).CreateCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.CompaniesService/CreateCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServiceServer).CreateCompanies(ctx, req.(*Companies))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompaniesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.CompaniesService",
	HandlerType: (*CompaniesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompanies",
			Handler:    _CompaniesService_CreateCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companies.proto",
}

func (m *Companies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Companies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PhoneNumbers) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.PhoneNumbers)))
		i += copy(dAtA[i:], m.PhoneNumbers)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdateAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.UpdateAt)))
		i += copy(dAtA[i:], m.UpdateAt)
	}
	if len(m.DeletedAt) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCompanies(dAtA, i, uint64(len(m.DeletedAt)))
		i += copy(dAtA[i:], m.DeletedAt)
	}
	if len(m.User) > 0 {
		for _, msg := range m.User {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCompanies(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCompanies(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Companies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.PhoneNumbers)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.UpdateAt)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovCompanies(uint64(l))
	}
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovCompanies(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompanies(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompanies(x uint64) (n int) {
	return sovCompanies(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Companies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompanies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Companies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Companies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompanies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompanies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, &User{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompanies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompanies
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompanies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompanies(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompanies
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompanies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompanies
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCompanies
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompanies
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompanies(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCompanies
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompanies = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompanies   = fmt.Errorf("proto: integer overflow")
)
